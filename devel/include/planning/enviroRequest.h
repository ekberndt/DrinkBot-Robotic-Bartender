// Generated by gencpp from file planning/enviroRequest.msg
// DO NOT EDIT!


#ifndef PLANNING_MESSAGE_ENVIROREQUEST_H
#define PLANNING_MESSAGE_ENVIROREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseStamped.h>

namespace planning
{
template <class ContainerAllocator>
struct enviroRequest_
{
  typedef enviroRequest_<ContainerAllocator> Type;

  enviroRequest_()
    : obj_posx()
    , obj_posy()
    , obj_posz()
    , obj_orientx()
    , obj_orienty()
    , obj_orientz()
    , obj_orientw()
    , sizex()
    , sizey()
    , sizez()
    , name_obj()
    , goal()  {
    }
  enviroRequest_(const ContainerAllocator& _alloc)
    : obj_posx(_alloc)
    , obj_posy(_alloc)
    , obj_posz(_alloc)
    , obj_orientx(_alloc)
    , obj_orienty(_alloc)
    , obj_orientz(_alloc)
    , obj_orientw(_alloc)
    , sizex(_alloc)
    , sizey(_alloc)
    , sizez(_alloc)
    , name_obj(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obj_posx_type;
  _obj_posx_type obj_posx;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obj_posy_type;
  _obj_posy_type obj_posy;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obj_posz_type;
  _obj_posz_type obj_posz;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obj_orientx_type;
  _obj_orientx_type obj_orientx;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obj_orienty_type;
  _obj_orienty_type obj_orienty;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obj_orientz_type;
  _obj_orientz_type obj_orientz;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _obj_orientw_type;
  _obj_orientw_type obj_orientw;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sizex_type;
  _sizex_type sizex;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sizey_type;
  _sizey_type sizey;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _sizez_type;
  _sizez_type sizez;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _name_obj_type;
  _name_obj_type name_obj;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::planning::enviroRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planning::enviroRequest_<ContainerAllocator> const> ConstPtr;

}; // struct enviroRequest_

typedef ::planning::enviroRequest_<std::allocator<void> > enviroRequest;

typedef boost::shared_ptr< ::planning::enviroRequest > enviroRequestPtr;
typedef boost::shared_ptr< ::planning::enviroRequest const> enviroRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planning::enviroRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planning::enviroRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planning::enviroRequest_<ContainerAllocator1> & lhs, const ::planning::enviroRequest_<ContainerAllocator2> & rhs)
{
  return lhs.obj_posx == rhs.obj_posx &&
    lhs.obj_posy == rhs.obj_posy &&
    lhs.obj_posz == rhs.obj_posz &&
    lhs.obj_orientx == rhs.obj_orientx &&
    lhs.obj_orienty == rhs.obj_orienty &&
    lhs.obj_orientz == rhs.obj_orientz &&
    lhs.obj_orientw == rhs.obj_orientw &&
    lhs.sizex == rhs.sizex &&
    lhs.sizey == rhs.sizey &&
    lhs.sizez == rhs.sizez &&
    lhs.name_obj == rhs.name_obj &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planning::enviroRequest_<ContainerAllocator1> & lhs, const ::planning::enviroRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planning

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planning::enviroRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planning::enviroRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::enviroRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planning::enviroRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::enviroRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planning::enviroRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planning::enviroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f753f1d4d2bf2e618dfa1eac6125eedf";
  }

  static const char* value(const ::planning::enviroRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf753f1d4d2bf2e61ULL;
  static const uint64_t static_value2 = 0x8dfa1eac6125eedfULL;
};

template<class ContainerAllocator>
struct DataType< ::planning::enviroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planning/enviroRequest";
  }

  static const char* value(const ::planning::enviroRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planning::enviroRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request message types\n"
"float32[] obj_posx\n"
"float32[] obj_posy\n"
"float32[] obj_posz\n"
"float32[] obj_orientx\n"
"float32[] obj_orienty\n"
"float32[] obj_orientz\n"
"float32[] obj_orientw\n"
"float32[] sizex\n"
"float32[] sizey\n"
"float32[] sizez\n"
"string[] name_obj\n"
"\n"
"geometry_msgs/PoseStamped goal\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::planning::enviroRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planning::enviroRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obj_posx);
      stream.next(m.obj_posy);
      stream.next(m.obj_posz);
      stream.next(m.obj_orientx);
      stream.next(m.obj_orienty);
      stream.next(m.obj_orientz);
      stream.next(m.obj_orientw);
      stream.next(m.sizex);
      stream.next(m.sizey);
      stream.next(m.sizez);
      stream.next(m.name_obj);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct enviroRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planning::enviroRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planning::enviroRequest_<ContainerAllocator>& v)
  {
    s << indent << "obj_posx[]" << std::endl;
    for (size_t i = 0; i < v.obj_posx.size(); ++i)
    {
      s << indent << "  obj_posx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obj_posx[i]);
    }
    s << indent << "obj_posy[]" << std::endl;
    for (size_t i = 0; i < v.obj_posy.size(); ++i)
    {
      s << indent << "  obj_posy[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obj_posy[i]);
    }
    s << indent << "obj_posz[]" << std::endl;
    for (size_t i = 0; i < v.obj_posz.size(); ++i)
    {
      s << indent << "  obj_posz[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obj_posz[i]);
    }
    s << indent << "obj_orientx[]" << std::endl;
    for (size_t i = 0; i < v.obj_orientx.size(); ++i)
    {
      s << indent << "  obj_orientx[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obj_orientx[i]);
    }
    s << indent << "obj_orienty[]" << std::endl;
    for (size_t i = 0; i < v.obj_orienty.size(); ++i)
    {
      s << indent << "  obj_orienty[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obj_orienty[i]);
    }
    s << indent << "obj_orientz[]" << std::endl;
    for (size_t i = 0; i < v.obj_orientz.size(); ++i)
    {
      s << indent << "  obj_orientz[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obj_orientz[i]);
    }
    s << indent << "obj_orientw[]" << std::endl;
    for (size_t i = 0; i < v.obj_orientw.size(); ++i)
    {
      s << indent << "  obj_orientw[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.obj_orientw[i]);
    }
    s << indent << "sizex[]" << std::endl;
    for (size_t i = 0; i < v.sizex.size(); ++i)
    {
      s << indent << "  sizex[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sizex[i]);
    }
    s << indent << "sizey[]" << std::endl;
    for (size_t i = 0; i < v.sizey.size(); ++i)
    {
      s << indent << "  sizey[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sizey[i]);
    }
    s << indent << "sizez[]" << std::endl;
    for (size_t i = 0; i < v.sizez.size(); ++i)
    {
      s << indent << "  sizez[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sizez[i]);
    }
    s << indent << "name_obj[]" << std::endl;
    for (size_t i = 0; i < v.name_obj.size(); ++i)
    {
      s << indent << "  name_obj[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name_obj[i]);
    }
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNING_MESSAGE_ENVIROREQUEST_H
